{
    "files": [
        "src/ethereum/EthereumLightClient.sol",
    ],
    "verify": "EthereumLightClient:certora/specs/EthereumLightClient.spec",
    "wait_for_results": "none",
    "rule_sanity": "basic",
    "optimistic_loop": true,
    "optimistic_fallback": true,
    // "coverage_info": "basic",
    "msg": "EthereumLightClient formal verification",
    "mutations": {
        "gambit": [
            {
            "filename": "src/ethereum/EthereumLightClient.sol",
            "num_mutants": 45,
            "functions": [
                "joinRelayerNetwork",
                "_removeRelayerFromWhitelist",
                "exitRelayerNetwork",
                "_chooseRandomProposer",
                // certora officially says not to check view/pure functions because there is no reason for it https://youtu.be/f3K-68k7vig?si=FEXuAKbzMGZNSjry&t=895
                // "_getRandomSeed()",
                "onlyProposer",
                "withdrawIncentive",
                // "constructor",
                "updateHeader",
                "updateSyncCommittee",
                // certora officially says not to check view/pure functions because there is no reason for it https://youtu.be/f3K-68k7vig?si=FEXuAKbzMGZNSjry&t=895
                // "_verifyHeader", 
                "_updateHeader",
                // we do not mutate _mapRootToPoseidon and _headerBLSVerify because they are used to prepare inputs to the proof verification. Since the proof verification cannot be verified by Certora (this is why used NONDET summarization for verifySignatureProof), it is not possible to verify the correctness of prepared inputs. These functions must be audited manually.
                // In addition, certora officially says not to check view/pure functions because there is no reason for it https://youtu.be/f3K-68k7vig?si=FEXuAKbzMGZNSjry&t=895
                // "_mapRootToPoseidon",
                // "_headerBLSVerify",
                // "_getCurrentSlot",
                // "_getPeriodFromSlot",
                // "slot2block",
                "syncCommitteeRootByPeriod",
                "syncCommitteeRootToPoseidon",
                "_distributeIncentive",
                "executionStateRoot"
            ]
            }
        ],
        // "manual_mutants": [
        //     {
        //         "file_to_mutate": "src/ethereum/EthereumLightClient.sol",
        //         "mutants_location": "gathered_mutants/batch1"
        //     }
        // ]
    }
}